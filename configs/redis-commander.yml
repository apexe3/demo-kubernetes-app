apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-commander
  namespace: { { .Values.namespace } }
  labels:
    app: redis-commander
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-commander
  template:
    metadata:
      labels:
        app: redis-commander
    spec:
      containers:
        - name: redis-commander
          image: rediscommander/redis-commander:latest
          ports:
            - containerPort: 8081
          env:
            - name: REDIS_HOSTS
              value: "local:redis:6379"
          # If you want to expose Redis Commander outside the cluster, you can add a NodePort or LoadBalancer type service below

---
apiVersion: v1
kind: Service
metadata:
  name: redis-commander
  namespace: { { .Values.namespace } }
spec:
  selector:
    app: redis-commander
  ports:
    - port: 8081
      targetPort: 8081
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: external-redis-commander
  namespace: { { .Values.namespace } }
spec:
  selector:
    app: redis-commander
  ports:
    - port: 8081
      targetPort: 8081
  type: LoadBalancer
